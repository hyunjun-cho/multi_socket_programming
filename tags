!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CHECK	checks.h	25;"	d
CHECK	driver.c	71;"	d	file:
CHECK	timer.c	30;"	d	file:
CHECKS_H	checks.h	15;"	d
CHECKV	checks.h	34;"	d
CHECKV	driver.c	75;"	d	file:
CHECKs	driver.c	73;"	d	file:
DEFAULT_CONCURRENCY	driver.c	60;"	d	file:
DEFAULT_ITERATIONS	driver.c	62;"	d	file:
DEPS	Makefile	/^DEPS=config.h Config Makefile echolib.h checks.h list.h$/;"	m
ECHOLIB_H	echolib.h	15;"	d
ERR_QUIT	checks.h	48;"	d
ERR_QUIT	driver.c	80;"	d	file:
ERR_QUIT_V	checks.h	56;"	d
EXECUTABLES	Makefile	/^EXECUTABLES=echocli echosrv usleep multisrv driver timer$/;"	m
FILES	Makefile	/^FILES=README Makefile configure echolib.c usleep.c echolib.h echocli.c echosrv.c multisrv.c submitP4.sh checks.h driver.c timer.c testone list.h$/;"	m
INIT_LIST_HEAD	list.h	74;"	d
LIST_H	list.h	13;"	d
LIST_HEAD	list.h	71;"	d
LIST_HEAD_INIT	list.h	69;"	d
LIST_POISON1	list.h	52;"	d
LIST_POISON2	list.h	53;"	d
MAXLINE	echolib.h	19;"	d
MAX_CONCURRENCY	driver.c	61;"	d	file:
QUIT	checks.h	43;"	d
QUIT	driver.c	84;"	d	file:
TIMEOUT	driver.c	199;"	d	file:
TIMEOUT	timer.c	33;"	d	file:
_BSD_SOURCE	usleep.c	4;"	d	file:
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	list.h	275;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
alrmhandler	driver.c	/^alrmhandler (int sig, siginfo_t *info, void *ignored) {$/;"	f
alrmhandler	timer.c	/^alrmhandler (int sig, siginfo_t *info, void *ignored) {$/;"	f
await_children	driver.c	/^await_children (supervisor_t *children) {$/;"	f
childpipe	driver.c	/^int childpipe[MAX_CONCURRENCY][2]; \/* used for stderr *\/$/;"	v
client_work	echocli.c	/^void client_work (int sockfd) {$/;"	f
clock_tick	driver.c	/^long int clock_tick;$/;"	v
concurrency	driver.c	/^int concurrency = DEFAULT_CONCURRENCY;$/;"	v
connection	echolib.h	/^typedef struct connection {$/;"	s
connection_init	echolib.c	/^connection_init (connection_t * conn) {$/;"	f
connection_t	echolib.h	/^ } connection_t;$/;"	t	typeref:struct:connection
container_of	list.h	43;"	d
create_supervisor	driver.c	/^create_supervisor (supervisor_t *sup) {$/;"	f
empty_pipe	driver.c	/^empty_pipe (supervisor_t *sup) {$/;"	f
errmsgbuff	driver.c	/^char errmsgbuff[1000];$/;"	v
find_child_id	driver.c	/^find_child_id (supervisor_t *children, pid_t pid) {$/;"	f
get_one_char	echolib.c	/^get_one_char (connection_t *conn, char *ptr) {$/;"	f	file:
get_server_port	driver.c	/^get_server_port (int argc, char **argv) {$/;"	f
get_server_port	echocli.c	/^int get_server_port (int argc, char **argv) {$/;"	f
gethostbyname	configure	/^ gethostbyname();$/;"	f
id	driver.c	/^  int id;$/;"	m	struct:supervisor_info	file:
install_siginthandler	echosrv.c	/^void install_siginthandler () {$/;"	f
install_siginthandler	multisrv.c	/^install_siginthandler () {$/;"	f
interrupted	timer.c	/^volatile int interrupted = 0;$/;"	v
iterations	driver.c	/^int iterations = DEFAULT_ITERATIONS;$/;"	v
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	253;"	d
list_for_each	list.h	261;"	d
list_for_each_entry	list.h	303;"	d
list_for_each_entry_continue	list.h	340;"	d
list_for_each_entry_reverse	list.h	316;"	d
list_for_each_entry_safe	list.h	354;"	d
list_for_each_prev	list.h	283;"	d
list_for_each_safe	list.h	293;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	330;"	d
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
local_perror	driver.c	/^void local_perror (const char * msg) {$/;"	f
main	driver.c	/^main(int argc, char **argv) {$/;"	f
main	echocli.c	/^int main (int argc, char **argv) {$/;"	f
main	echosrv.c	/^int main (int argc, char **argv) {$/;"	f
main	multisrv.c	/^main (int argc, char **argv) {$/;"	f
main	timer.c	/^main(int argc, char **argv) {$/;"	f
main	usleep.c	/^int main(int argc, char *argv[])$/;"	f
make_nonblocking	driver.c	/^make_nonblocking (int pfd) {$/;"	f
ms	driver.c	/^ms (clock_t t) {$/;"	f
ms	timer.c	/^ms (struct timeval *tv) {$/;"	f
nanosleep	configure	/^ nanosleep();$/;"	f
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
offsetof	list.h	32;"	d
offsetof	list.h	33;"	d
open_listening_socket	echosrv.c	/^void open_listening_socket (int *listenfd) {$/;"	f
open_listening_socket	multisrv.c	/^open_listening_socket (int *listenfd) {$/;"	f
pfd	driver.c	/^  int pfd;$/;"	m	struct:supervisor_info	file:
pid	driver.c	/^  pid_t pid;$/;"	m	struct:supervisor_info	file:
prefetch	list.h	26;"	d
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
pthread_create	configure	/^ pthread_create();$/;"	f
read_buf	echolib.h	/^  char  read_buf[MAXLINE];     \/* the input buffer *\/$/;"	m	struct:connection
read_cnt	echolib.h	/^  int   read_cnt;              \/* number of characters read into read_buf[] *\/$/;"	m	struct:connection
read_ptr	echolib.h	/^  char *read_ptr;              \/* next location to read from in read_buf[]  *\/$/;"	m	struct:connection
readline	echolib.c	/^readline (connection_t *conn, void *vptr, size_t maxlen) {$/;"	f
remove_handlers	driver.c	/^remove_handlers () {$/;"	f
servaddr	driver.c	/^struct sockaddr_in servaddr;$/;"	v	typeref:struct:sockaddr_in
serve_connection	echosrv.c	/^void serve_connection (int sockfd) {$/;"	f
serve_connection	multisrv.c	/^serve_connection (int sockfd) {$/;"	f
server_handoff	echosrv.c	/^void server_handoff (int sockfd) {$/;"	f
server_handoff	multisrv.c	/^server_handoff (int sockfd) {$/;"	f
set_concurrency	driver.c	/^set_concurrency () {$/;"	f
set_iterations	driver.c	/^set_iterations () {$/;"	f
set_server_address	driver.c	/^set_server_address (int argc, char **argv) {$/;"	f
set_server_address	echocli.c	/^void set_server_address (struct sockaddr_in *servaddr, int argc, char **argv) {$/;"	f
setalrmhandler	driver.c	/^setalrmhandler () {$/;"	f
setalrmhandler	timer.c	/^setalrmhandler () {$/;"	f
shutting_down	echolib.c	/^shutting_down = 0;$/;"	v
siginthandler	echosrv.c	/^void siginthandler (int sig, siginfo_t *info, void *ignored) {$/;"	f
siginthandler	multisrv.c	/^siginthandler (int sig, siginfo_t *info, void *ignored) {$/;"	f
socket	configure	/^ socket();$/;"	f
sockfd	driver.c	/^  int sockfd;$/;"	m	struct:supervisor_info	file:
sockfd	echolib.h	/^  int   sockfd;                \/* socket file descriptor *\/$/;"	m	struct:connection
supervisor	driver.c	/^supervisor (supervisor_t *sup) {$/;"	f
supervisor_info	driver.c	/^typedef struct supervisor_info {$/;"	s	file:
supervisor_t	driver.c	/^} supervisor_t;$/;"	t	typeref:struct:supervisor_info	file:
this_process	driver.c	/^char *this_process = "driver";$/;"	v
timed_out	driver.c	/^volatile int timed_out = 0;$/;"	v
timed_out	timer.c	/^volatile int timed_out = 0;$/;"	v
writen	echolib.c	/^writen (connection_t *conn, const void *vptr, size_t n) {$/;"	f
